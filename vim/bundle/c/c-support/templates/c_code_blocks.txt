$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
$
== cpp.cin ==
cin >> <CURSOR>;
$
== cpp.cout == insert ==
cout    << <CURSOR> << endl;
$
== cpp.cout-operator == insert ==
<< "<CURSOR>"
$
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.output-manipulator-boolalpha       == insert ==
<< boolalpha <CURSOR>
== cpp.output-manipulator-dec             == insert ==
<< dec <CURSOR>
== cpp.output-manipulator-endl            == insert ==
<< endl <CURSOR>
== cpp.output-manipulator-fixed           == insert ==
<< fixed <CURSOR>
== cpp.output-manipulator-flush           == insert ==
<< flush <CURSOR>
== cpp.output-manipulator-hex             == insert ==
<< hex <CURSOR>
== cpp.output-manipulator-internal        == insert ==
<< internal <CURSOR>
== cpp.output-manipulator-left            == insert ==
<< left <CURSOR>
== cpp.output-manipulator-oct             == insert ==
<< oct <CURSOR>
== cpp.output-manipulator-right           == insert ==
<< right <CURSOR>
== cpp.output-manipulator-scientific      == insert ==
<< scientific <CURSOR>
== cpp.output-manipulator-setbase         == insert ==
<< setbase(10<CURSOR>)
== cpp.output-manipulator-setfill         == insert ==
<< setfill(<CURSOR>)
== cpp.output-manipulator-setiosflag      == insert ==
<< setiosflags(<CURSOR>)
== cpp.output-manipulator-setprecision    == insert ==
<< setprecision(6<CURSOR>)
== cpp.output-manipulator-setw            == insert ==
<< setw(0<CURSOR>)
== cpp.output-manipulator-showbase        == insert ==
<< showbase <CURSOR>
== cpp.output-manipulator-showpoint       == insert ==
<< showpoint <CURSOR>
== cpp.output-manipulator-showpos         == insert ==
<< showpos <CURSOR>
== cpp.output-manipulator-uppercase       == insert ==
<< uppercase <CURSOR>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.method-implementation ==
/*
 *------------------------------------------------------------------------------
 *       Class:  |?CLASSNAME|
 *      Method:  |?METHODNAME|
 * Description:  <CURSOR>
 *------------------------------------------------------------------------------
 */
<+FUNC_TYPE+> |CLASSNAME|::|METHODNAME| (<+argument list+>) {
    <+FUNCTION+>
    return ;
}       /* -----  end of method |CLASSNAME|::|METHODNAME|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.accessor-implementation ==
/*
 *------------------------------------------------------------------------------
 *       Class:  |?CLASSNAME|
 *      Method:  get_|?ATTRIBUTE|
 *------------------------------------------------------------------------------
 */
inline |?RETURNTYPE|
|CLASSNAME|::get_|ATTRIBUTE| () const {
    return |ATTRIBUTE|;
}       /* -----  end of method |CLASSNAME|::get_|ATTRIBUTE|  ----- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  set_|ATTRIBUTE|
 *------------------------------------------------------------------------------
 */
inline void
|CLASSNAME|::set_|ATTRIBUTE| (|RETURNTYPE| value) {
    |ATTRIBUTE| = value;
    return ;
}       /* -----  end of method |CLASSNAME|::set_|ATTRIBUTE|  ----- */
<CURSOR>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-definition ==
/*
 * =============================================================================
 *        Class:  |?CLASSNAME:c|
 *  Description:  <CURSOR>
 * =============================================================================
 */
class |CLASSNAME| {
  public:
    /* =========================   LIFECYCLE   =============================== */

    /* constructor */
    |CLASSNAME| ();
    /* copy constructor */
    |CLASSNAME| (const |CLASSNAME| &other);
    /* destructor */
    ~|CLASSNAME| ();

    /* =========================   ACCESSORS   =============================== */

    /* =========================   MUTATORS    =============================== */

    /* =========================   OPERATORS   =============================== */

    /* assignment operator */
    |CLASSNAME|& operator = (const |CLASSNAME| &other);

  protected:
    /* ========================  DATA MEMBERS  =============================== */

  private:
    /* =======================  PRIVATE FUNCTIONS  =========================== */

    /* ========================  DATA MEMBERS  =============================== */

}; /* -----  end of class |CLASSNAME|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-implementation ==
/*
 *------------------------------------------------------------------------------
 *       Class:  |?CLASSNAME:c|
 *      Method:  |CLASSNAME|
 * Description:  constructor
 *------------------------------------------------------------------------------
 */
|CLASSNAME|::|CLASSNAME| () {<CURSOR>
}  /* -----  end of method |CLASSNAME|::|CLASSNAME|  (constructor)  ----- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  |CLASSNAME|
 * Description:  copy constructor
 *------------------------------------------------------------------------------
 */
|CLASSNAME|::|CLASSNAME| (const |CLASSNAME| &other) {
}  /* -----  end of method |CLASSNAME|::|CLASSNAME|  (copy constructor)  ----- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  ~|CLASSNAME|
 * Description:  destructor
 *------------------------------------------------------------------------------
 */
|CLASSNAME|::~|CLASSNAME| () {
}  /* -----  end of method |CLASSNAME|::~|CLASSNAME|  (destructor)  ----- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  operator =
 * Description:  assignment operator
 *------------------------------------------------------------------------------
 */
|CLASSNAME|&
|CLASSNAME|::operator = (const |CLASSNAME| &other) {
  if (this != &other) {
  }
  return *this;
}  /* -----  end of method |CLASSNAME|::operator =  (assignment operator)  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.error-class ==
/*
 * =============================================================================
 *        Class:  |?CLASSNAME:c|
 *  Description:  <CURSOR>
 * =============================================================================
 */
class |CLASSNAME| {
  public:     |CLASSNAME| (string msg = "|CLASSNAME|"):message(msg)  { }
              virtual ~|CLASSNAME| ()  { }
              virtual string what () const throw ()  { return message; }
  protected:  string  message;
}; /* -----  end of class |CLASSNAME|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-method-implementation ==
template < class T >
void<CURSOR> |?CLASSNAME|<T>::|?METHODNAME| (<+argument list+>) {
    return ;
}       /* -----  end of method |CLASSNAME|<T>::|METHODNAME|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-accessor-implementation ==
/*
 *------------------------------------------------------------------------------
 *       Class:  |?CLASSNAME|
 *      Method:  get_|?ATTRIBUTE|
 *------------------------------------------------------------------------------
 */
template < class T >
inline  |?RETURNTYPE| |CLASSNAME|<T>::get_|ATTRIBUTE| () const {
    return |ATTRIBUTE|;
}       /* -----  end of method |CLASSNAME|<T>::get_|ATTRIBUTE|  ----- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  set_|ATTRIBUTE|
 *------------------------------------------------------------------------------
 */
template < class T >
inline  void |CLASSNAME|<T>::set_|ATTRIBUTE| (|RETURNTYPE| value) {
    |ATTRIBUTE| = value;
    return ;
}       /* -----  end of method |CLASSNAME|<T>::set_|ATTRIBUTE|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-definition ==
/*
 * =============================================================================
 *        Class:  |?CLASSNAME:c|
 *  Description:  <CURSOR>
 * =============================================================================
 */

template < class T >
class |CLASSNAME| {
  public:
    /* =========================   LIFECYCLE   =============================== */

    /* constructor */
    |CLASSNAME| ();
    /* copy constructor */
    |CLASSNAME| (const |CLASSNAME| &other);
    /* destructor */
    ~|CLASSNAME| ();

    /* =========================   ACCESSORS   =============================== */

    /* =========================   MUTATORS    =============================== */

    /* =========================   OPERATORS   =============================== */

    /* assignment operator */
    |CLASSNAME|& operator = (const |CLASSNAME| &other);

  protected:
    /* ========================  DATA MEMBERS  =============================== */

  private:
    /* ========================  DATA MEMBERS  =============================== */

}; /* -----  end of template class |CLASSNAME|  ----- */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-implementation ==
/*
 *------------------------------------------------------------------------------
 *       Class:  |?CLASSNAME:c|
 *      Method:  |CLASSNAME|
 * Description:  constructor
 *------------------------------------------------------------------------------
 */
template < class T >
|CLASSNAME|< T >::|CLASSNAME| () {
<SPLIT><CURSOR>
}  /* ----------  end of constructor of template class |CLASSNAME|  ---------- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  |CLASSNAME|
 * Description:  copy constructor
 *------------------------------------------------------------------------------
 */
template < class T >
|CLASSNAME|< T >::|CLASSNAME| (const |CLASSNAME| &other) {
}  /* ----------  end of copy constructor of template class |CLASSNAME|  ---------- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  ~|CLASSNAME|
 * Description:  destructor
 *------------------------------------------------------------------------------
 */
template < class T >
|CLASSNAME|< T >::~|CLASSNAME| () {
}  /* ----------  end of destructor of template class |CLASSNAME|  ---------- */

/*
 *------------------------------------------------------------------------------
 *       Class:  |CLASSNAME|
 *      Method:  operator =
 * Description:  assignment operator
 *------------------------------------------------------------------------------
 */
template < class T >
|CLASSNAME|< T >& |CLASSNAME|< T >::operator = (const |CLASSNAME| &other) {
  return *this;
}  /* ----------  end of assignment operator of template class |CLASSNAME|  ------ */

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-function ==
template <class T>
void<CURSOR> |?TEMPALTE_FUNCTION_NAME| (<+argument list+>) {
    return ;
}       /* -----  end of template function |?TEMPALTE_FUNCTION_NAME|  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-in ==
ostream &
operator << (ostream & os, const |?CLASSNAME| & obj) {
    os << obj.<CURSOR> ;
    return os;
}       /* -----  end of function operator <<  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-out ==
istream &
operator >> (istream & is, |?CLASSNAME| & obj) {
    is >> obj.<CURSOR> ;
    return is;
}       /* -----  end of function operator >>  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.try-catch ==
try {
<SPLIT>}
catch (const <CURSOR> &ExceptObj) {       /* handle exception: */
}
catch (...) {       /* handle exception: unspecified */
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch ==
catch (const <CURSOR> &ExceptObj) {       /* handle exception: */
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch-points ==
catch (...) {       /* handle exception: unspecified */
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.extern ==
extern "C" {<CURSOR>
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-input-file ==
string    ifs_file_name = "<CURSOR>";                 /* input  file name */
ifstream  ifs;                                  /* create ifstream object */

ifs.open (ifs_file_name.c_str());                        /* open ifstream */
if (!ifs) {
    cerr << "\nERROR : failed to open input  file " << ifs_file_name << endl;
    exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ifs.close ();                                          /* close ifstream */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-output-file ==
string    ofs_file_name = "<CURSOR>";                 /* input  file name */
ofstream  ofs;                                  /* create ofstream object */

ofs.open (ofs_file_name.c_str());                        /* open ofstream */
if (!ofs) {
    cerr << "\nERROR : failed to open output file " << ofs_file_name << endl;
    exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ofs.close ();                                          /* close ofstream */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.namespace-std ==
using namespace std;
== cpp.namespace ==
using namespace |?NAMESPACE|;
== cpp.namespace-block ==
namespace |?NAMESPACE| {<CURSOR>
<SPLIT>}        /* -----  end of namespace |NAMESPACE|  ----- */
== cpp.namespace-alias ==
namespace |?NAMESPACE_ALIAS|    = {-original namespace name-};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.rtti-typeid == insert ==
typeid(<CURSOR><SPLIT>)
$
== cpp.rtti-static-cast == insert ==
static_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-const-cast == insert ==
const_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-reinterpret-cast == insert ==
reinterpret_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-dynamic-cast == insert ==
dynamic_cast<>(<CURSOR><SPLIT>)

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function ==
$/*
$ * ===  FUNCTION  =============================================================
$ *         Name:  |?FUNCTION_NAME|
$ *  Description:
$ * ============================================================================
$ */
/*
 * ===  FUNCTION  ==============================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  <CURSOR>
 *       @param:  <+PARAMETERS+>
 *      @return:  <+RETURN_VALUES+>
 * =============================================================================
 */
<+FUNC_TYPE+> |FUNCTION_NAME|(<+argument list+>){

<SPLIT> return <+return value+>;
}       /* -----  end of function |FUNCTION_NAME|  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.function-static ==
$/*
$ * ===  FUNCTION  =============================================================
$ *         Name:  |?FUNCTION_NAME|
$ *  Description:
$ * ============================================================================
$ */
/*
 * ===  FUNCTION  ==============================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  <CURSOR>
 *       @param:  <+PARAMETERS+>
 *      @return:  <+RETURN_VALUES+>
 * =============================================================================
 */
static <+FUNC_TYPE+> |FUNCTION_NAME|(<+argument list+>) {
<SPLIT>return <+return value+>;
}       /* -----  end of static function |FUNCTION_NAME|  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.main ==
$#include <stdlib.h>
$
/*
 * ===  FUNCTION  ==============================================================
 *         Name:  main
 *  Description:  <CURSOR>
 * =============================================================================
 */
int main (int argc, char **argv) {
<SPLIT><++>
<SPLIT>return EXIT_SUCCESS;
}       /* ----------  end of function main  ---------- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.enum ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};       /* ----------  end of enum |ENUM_NAME|  ---------- */

typedef enum |ENUM_NAME| |ENUM_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.struct ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};       /* ----------  end of struct |STRUCT_NAME|  ---------- */

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.union ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};       /* ----------  end of union |UNION_NAME|  ---------- */

typedef union |UNION_NAME| |UNION_NAME:c|;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.printf == insert ==
printf ("<CURSOR>\n");
== idioms.scanf == insert ==
scanf ("<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.calloc ==
|?POINTER|  = calloc((size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>));
if (|POINTER|==NULL) {
    fprintf (stderr, "\ndynamic memory allocation failed\n");
    exit (EXIT_FAILURE);
}

free(|POINTER|);
|POINTER|   = NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.malloc ==
|?POINTER|  = malloc(sizeof(<CURSOR><+TYPE+>));
if (|POINTER|==NULL) {
    fprintf(stderr, "\ndynamic memory allocation failed\n");
    exit(EXIT_FAILURE);
}

free (|POINTER|);
|POINTER|   = NULL;

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.realloc ==
|?POINTER|  = realloc(|POINTER|, sizeof(<CURSOR><+TYPE+>));
if (|POINTER|==NULL) {
    fprintf(stderr, "\ndynamic memory reallocation failed\n");
    exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.sizeof == insert ==
sizeof(<CURSOR><SPLIT>)
== idioms.assert == insert ==
assert(<CURSOR><SPLIT>);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-input-file ==
FILE    *|?FILEPOINTER|;                            /* input-file pointer */
char    *|FILEPOINTER|_file_name = "<CURSOR>";      /* input-file name    */

|FILEPOINTER|   = fopen(|FILEPOINTER|_file_name, "r");
if (|FILEPOINTER| == NULL) {
    fprintf (stderr, "couldn't open file '%s'; %s\n",
            |FILEPOINTER|_file_name, strerror(errno));
    exit(EXIT_FAILURE);
}
<SPLIT>{-continue here-}
if(fclose(|FILEPOINTER|) == EOF) {                 /* close input file   */
    fprintf(stderr, "couldn't close file '%s'; %s\n",
            |FILEPOINTER|_file_name, strerror(errno));
    exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.open-output-file ==
FILE    *|?FILEPOINTER|;                            /* output-file pointer */
char    *|FILEPOINTER|_file_name = "<CURSOR>";      /* output-file name    */

|FILEPOINTER|   = fopen(|FILEPOINTER|_file_name, "w");
if (|FILEPOINTER| == NULL) {
    fprintf (stderr, "couldn't open file '%s'; %s\n",
            |FILEPOINTER|_file_name, strerror(errno));
    exit(EXIT_FAILURE);
}
<SPLIT>{-continue here-}
if(fclose(|FILEPOINTER|) == EOF) {                 /* close output file   */
    fprintf(stderr, "couldn't close file '%s'; %s\n",
            |FILEPOINTER|_file_name, strerror(errno));
    exit(EXIT_FAILURE);
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== idioms.fprintf == insert ==
fprintf(|?FILEPOINTER|, "<CURSOR>\n",);
== idioms.fscanf == insert ==
fscanf(|?FILEPOINTER|, "<CURSOR>", &);
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


$-------------------------------------------------------------------------
== preprocessor.include-global == below ==
#include <<CURSOR>>
$-------------------------------------------------------------------------
== preprocessor.include-local == below ==
#include "<CURSOR>"
$-------------------------------------------------------------------------
== preprocessor.define == insert ==
#define <CURSOR>            /* <++> */
$-------------------------------------------------------------------------
== preprocessor.undefine == insert ==
#undef  <CURSOR>            /* <++> */
$-------------------------------------------------------------------------
== preprocessor.if-endif == insert ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#endif     /* -----  |CONDITION|  ----- */
$-------------------------------------------------------------------------
== preprocessor.if-else-endif == insert ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
$-------------------------------------------------------------------------
== preprocessor.ifdef-else-endif == insert ==
#ifdef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
$-------------------------------------------------------------------------
== preprocessor.ifndef-else-endif == insert ==
#ifndef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
$-------------------------------------------------------------------------
== preprocessor.ifndef-def-endif == insert ==
#ifndef  |?BASENAME:L|_INC
#define  |BASENAME|_INC
<CURSOR><SPLIT>
#endif   /* ----- #ifndef |BASENAME|_INC  ----- */
$-------------------------------------------------------------------------
== preprocessor.header-protector == insert ==
#ifndef |BASENAME:u|_H_
#define |BASENAME:u|_H_
<CURSOR><SPLIT>
#endif   /* ----- #ifndef |BASENAME:u|_H_  ----- */
$-------------------------------------------------------------------------
== preprocessor.error == insert ==
#error  "<CURSOR>"          /* <++> */
$-------------------------------------------------------------------------
== preprocessor.line == insert ==
#line   <CURSOR>            /* <++> */
$-------------------------------------------------------------------------
== preprocessor.pragma == insert ==
#pragma <CURSOR>            /* <++> */
$-------------------------------------------------------------------------

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.do-while ==
do {
<SPLIT>} while (<CURSOR>); /* -----  end do-while  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.for ==
for (<CURSOR>)
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.for-block ==
for (<CURSOR>) {
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.if ==
if (<CURSOR>)
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.if-block ==
if (<CURSOR>) {
<SPLIT><+IF PART+>
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.if-else ==
if (<CURSOR>)
<SPLIT>else
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.if-block-else ==
if (<CURSOR>) {
<SPLIT><+IF PART+>
}
else {
<+ELSE PART+>
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.else-block ==
else {
<CURSOR><SPLIT>
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.while ==
while (<CURSOR>)
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.while-block ==
while (<CURSOR>) {
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.switch ==
switch (<CURSOR>) {
    case <+LABEL+>:
        <SPLIT>break;
    case <+LABEL+>:
        break;
    case <+LABEL+>:
        break;
        <++>
    default:
        break;
}            /* -----  end switch  ----- */
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.case == append ==
case <CURSOR>:
break;
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== statements.block ==
{
<CURSOR><SPLIT>
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

