#!/usr/bin/bash

# note that zsh is only enabled on my own mac

declare STATUS
declare USER_OPTION_Operation
declare USER_OPTION_OS
declare USER_OPTION_Ver
declare USER_OPTION_BASHNAME
declare USER_COMMANDS
declare enBACKUP=n
declare enCLEAN=n
declare enLINK=n


# three actions: backup, clean, build the links
# functions
# para: n/a, for clean, the general list will do
func_CLEAN(){
    while read -r line
    do
        rm -rf ../.$line
    done < list_general
}

# para: n/a, for backup the general list will do
func_BACKUP(){
    mkdir -p ../.dotfiles_backup
    while read -r line
    do
        if [ -e "../.$line" ]
        then
            cp -a ../.$line ../.dotfiles_backup/$line
        fi
    done < list_general
}

# para: default_bash_name bashname bashrc
func_BASHNAME_helper(){
    sed -i  -e  "s/$1/$2/g"  "$3"
    #rm *.sed_bak
}
# para: os ver bashname
func_BASHNAME(){
    if [ $1 = "mac" ]
    then
        if [ $2 = "me" ]
        then
            # there is the ros bash problem
            func_BASHNAME_helper "Private\ Mac" "$3" bashrc_mac_me
        elif [ $2 = "pub" ]
        then
            func_BASHNAME_helper "Public\ Mac" "$3" bashrc_mac_pub
        fi

    elif [ $1 = "ubuntu" ]
    then
        if [ $2 = "me" ]
        then
            func_BASHNAME_helper "Private\ Ubuntu" $3  bashrc_ubuntu_me
        elif [ $2 = "pub" ]
        then
            func_BASHNAME_helper "Public\ Ubuntu" $3 bashrc_ubuntu_pub
        fi
    fi
}



# para: list
#if there exists some non-general files, save them
func_LINK_helper(){
    while read -r line
    do
        if [ -e "../.$line" ]
        then
            if [ ! -e "../dotfiles_backup" ]
            then mkdir ../dotfiles_backup
            fi
            #{ [ -e "../dotfiles_backup/$line" ] ||  cp -a ../.$line ../dotfiles_backup/$line } && rm -rf ../.$line || echo "Something went wrong while copying."

            [[ -e "../dotfiles_backup/$line" || -h "../dotfiles_backup/$line" ]] ||  cp -a ../.$line ../dotfiles_backup/$line
            rm -rf ../.$line
        fi
        ln -s ./dotfiles/$line ../.$line
    done < $1
}
# para: os ver
func_LINK(){
    if [ $1 = "mac" ]
    then
        if [ $2 = "me" ]
        then
            # there is the ros bash problem
            func_LINK_helper ./list_mac_me
            rm ../.bashrc_mac_me
            ln -s ./dotfiles/bashrc_mac_me ../.bash_profile
            ln -s ./dotfiles/bashrc_ros ../.bashrc
        elif [ $2 = "pub" ]
        then
            func_LINK_helper ./list_mac_pub
            rm ../.bashrc_mac_pub
            ln -s ./dotfiles/bashrc_mac_pub ../.bash_profile
        fi

    elif [ $1 = "ubuntu" ]
    then
        if [ $2 = "me" ]
        then
            func_LINK_helper ./list_ubuntu_me
            rm ../.bashrc_ubuntu_me
            ln -s ./dotfiles/bashrc_ubuntu_me ../.bashrc
        elif [ $2 = "pub" ]
        then
            func_LINK_helper ./list_ubuntu_pub
            rm ../.bashrc_ubuntu_pub
            ln -s ./dotfiles/bashrc_ubuntu_pub ../.bashrc
        fi
    fi
}

func_MOVE_helper(){
    while read -r line
    do
        mv $line TEMP_FOLDER
    done < $1
}
# para: os ver
func_ISOLATION(){
    mkdir -p TEMP_FOLDER
    # first copy the tools
    mv run list_general bashrc_common bashrc_colors TEMP_FOLDER/
    if [[ -e dotfiles.config ]]
    then mv dotfiles.config update TEMP_FOLDER
    fi

    if [ $1 = "mac" ]
    then
        if [ $2 = "me" ]
        then
            func_MOVE_helper list_mac_me
        elif [ $2 = "pub" ]
        then
            func_MOVE_helper list_mac_pub
        fi

    elif [ $1 = "ubuntu" ]
    then
        if [ $2 = "me" ]
        then
            func_MOVE_helper ./list_ubuntu_me
        elif [ $2 = "pub" ]
        then
            func_MOVE_helper ./list_ubuntu_pub
        fi
    fi
    ls -A1 | grep -v TEMP_FOLDER | xargs rm -rf
    mv ./TEMP_FOLDER/* .
    rm -r TEMP_FOLDER
}

func_RESTORE(){
    func_CLEAN
    mv ../.dotfiles_backup/* ../
    cd ..
    rm -rf dotfiles
    rm -rf .dotfiles_backup
}

func_CREATECONFIGFILE(){
    if [ -e dotfiles.config ]
    then return
    fi
    touch dotfiles.config
    echo "i" >> dotfiles.config
    echo $USER_OPTION_OS >> dotfiles.config
    echo $USER_OPTION_Ver >> dotfiles.config
    echo $USER_OPTION_BASHNAME >> dotfiles.config
    echo "n" >> dotfiles.config
    echo "y" >> dotfiles.config
    return
}

STATUS=0

echo "===================="
echo "Dotfiles Setup Guide"
echo "version 1"
echo "by huangzonghao"
echo "===================="
echo "Make sure that this is ~/dotfiles before you move on"

# Frist ask for the setup specifications
while [ $STATUS -eq 0 ]
do
    echo "Installation or restore? (i, r)"
    read USER_OPTION_Operation
    if [[  $USER_OPTION_Operation = "i" ]]
    then
        STATUS=1
        enLINK="y"

    elif [[ $USER_OPTION_Operation = "r" ]]
    then STATUS=21 # wow, timmy D!
    fi
done

while [ $STATUS -eq 1 ]
do
    echo "Operating System? (mac, ubuntu)"
    read USER_OPTION_OS
    if [[ $USER_OPTION_OS = "mac" ]] || [[ $USER_OPTION_OS = "ubuntu" ]]
    then let STATUS=$STATUS+1
    fi
done

while [ $STATUS -eq 2 ]
do
    echo "Private or Public? (me, pub)"
    read USER_OPTION_Ver
    if [[ $USER_OPTION_Ver = "me" ]] || [[ $USER_OPTION_Ver = "pub" ]]
    then let STATUS=$STATUS+1
    fi
done

#no need to put this action into a while loop
echo "Name for the shell?( leave blank for the default name )"
read  USER_OPTION_BASHNAME
#if [ "$USER_OPTION_BASHNAME" != "" ]
#-n is true when the string is not empty, -z for zero length
if [ -n "$USER_OPTION_BASHNAME" ]
then func_BASHNAME $USER_OPTION_OS $USER_OPTION_Ver "$USER_OPTION_BASHNAME"
fi

while [ $STATUS -eq 3 ]
do
    echo "Need to backup the original files before installation? (y, n)"
    read enBACKUP

    if [[ $enBACKUP = "y" ]] || [[ $enBACKUP = "n" ]]
    then let STATUS=$STATUS+1
    fi
done

#while [ $STATUS -eq 4 ]
#do
#echo "Clean the existing dotfiles first? (y, n)"
#read enCLEAN
#if [ $enCLEAN = "y" ] || [ $enCLEAN = "n" ]
#then let STATUS=$STATUS+1
#fi
#done

#always clean first and no need to ask
let STATUS=$STATUS+1
enCLEAN=y

# now start the operations
if [ $STATUS -eq 5 ]
then
    if [[ $enBACKUP = "y" ]]
    then
        func_BACKUP
    fi

    if [[ $enCLEAN = "y" ]]
    then
        func_CLEAN
    fi

    if [[ $enLINK = "y" ]]
    then
        func_LINK $USER_OPTION_OS $USER_OPTION_Ver
    fi

    if [[ $USER_OPTION_OS = "mac" ]]
    then source ~/.bash_profile
    elif [[ $USER_OPTION_OS = "ubuntu" ]]
    then source ~/.bashrc
    fi

    # check if need to clean up the irrelevant files on pub computers
    echo "Linking finished, need to clean up all the irrelevant file? (y, n)"
    declare USER_OPTION
    read USER_OPTION
    if [[ $USER_OPTION = "y" ]]
    then
        if [[ ! -e dotfiles.config ]]
        then func_CREATECONFIGFILE
        fi
        func_ISOLATION $USER_OPTION_OS $USER_OPTION_Ver
    fi
fi

if [ $STATUS -eq 21 ]
then
    echo "Now we are gonna delete the entire dotfiles folder and restore your backuped files, are you sure? (y, n)"
    read USER_OPTION
    if [[ $USER_OPTION = "y" ]]
    then
        func_RESTORE
        echo "Restoring finished."
    fi
fi


echo -n "Any additional commands?"
read USER_COMMANDS;
if [ -z USER_COMMANDS ]
then $USER_COMMANDS
fi

unset STATUS
unset USER_OPTION_Operation
unset USER_OPTION_OS
unset USER_OPTION_Ver
unset USER_OPTION_BASHNAME
unset enBACKUP
unset enCLEAN
unset enLINK

echo "All processes done successfully, exit."
